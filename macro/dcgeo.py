#!/usr/bin/env python3

import datetime
import logging
import multiprocessing as mp
import os
import shutil
import sys

import ROOT

import conf

logger = logging.getLogger('__main__').getChild(__name__)
tmp_dir = os.path.join(os.path.dirname(__file__), 'tmp')
os.makedirs(tmp_dir, exist_ok=True)

#______________________________________________________________________________
def output_result(run_info, result_dict, update=False):

    logger.debug(run_info)
    dcgeo_path = conf.get(run_info, 'DCGEO')
    with open(dcgeo_path, 'r') as f:
        lines = f.readlines()

    output_path = os.path.join(tmp_dir, f'DCGeomParam_{run_info["key"]:05d}')
    comment = (f'# {datetime.datetime.now()} generated by '
             + f'{result_dict["generator"]}'
             + f' using {os.path.basename(run_info["root"])}')

    with open(output_path, 'w') as f:
        f.write(comment + '\n')
        for line in lines:
            if not line.strip() or line.lstrip().startswith('#'):
                f.write(line)
                continue
            fields = line.strip().split()
            if len(fields) < 5:
                f.write(line)
                continue
            name_field = fields[1] 
            if name_field.startswith('BLC2a-') or name_field.startswith('BLC2b-'):
                if name_field in result_dict:
                    ofs, res = result_dict[name_field]
                    new_fields = fields[:]
                    new_fields[-4] = f'{res:.5f}'
                    new_fields[-1] = f'{ofs:.5f}'
                    f.write('\t'.join(new_fields) + '\n')
                else:
                    f.write(line)
            else:
                f.write(line)

    logger.info(f'generate {output_path}')

    if update:
        dcgeo_dir = os.path.dirname(dcgeo_path)
        logger.info(f'update {os.path.join(dcgeo_dir, os.path.basename(output_path))}')
        shutil.copy2(output_path, dcgeo_dir)
        conf.replace(run_info, 'DCGEO', os.path.basename(output_path))
